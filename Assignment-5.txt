Ans1:- The difference is that JRE(java runtime environment) the purpose for the JRE is to run the program it also includes the JVM inside it, It also includes the core
Libraries of the java like:- java.long, java.util and also the development tools.
		and JDK(java development kit) the purpose for the JDK is that it deployed the java program and it include the JRE and the Development tools like javac (compiler), javadoc, jdb (debugger), etc. Use Case of JDK is that If you want to write, compile, and debug Java programs

Ans2:- JVM(java virtual machine)
Purpose: Executes Java bytecode and makes Java platform-independent.

Function: Converts compiled .class files into machine code for the host OS.

Key Point: JVM does not include tools for development; it only runs Java programs.

Platform Dependent: Yes, there’s a different JVM for Windows, Linux, Mac, etc.

note:- java language is platform independent.

Ans3:- Memory Areas allocated by JVM are:-
	Heap:-: Stores objects (instances of classes) and their instance variables.
		Every time you create a new object with new, it goes into the Heap
	Stack:- Stores method call frames, local variables, and references to objects 		in Heap.

	Method Area :- Class info, static variables, constants
	PC Registers → Keep track of the currently executing instruction

Ans4:- JIT stands for Just-In-Time Compiler.

	It is a part of the JVM that improves the performance of Java programs.

	It converts Java bytecode into native machine code at runtime, instead of 	interpreting it every time.
	

	Bytecode

	Format: Intermediate code, not pure 0s and 1s

	Executable by: JVM only

	Platform dependency: Platform-independent

	Generated by: Java compiler (javac)

	Native Machine Code

	Format: Binary code (0s and 1s)

	Executable by: CPU directly

	Platform dependency: Platform-dependent

	Generated by: JIT compiler (at runtime)

Ans5:-	The Java platform is a set of programs (JVM, JRE, and JDK) that allows Java programs to run on any operating system.
	It is platform-independent because Java code is compiled into bytecode,which the JVM can execute anywhere.

Ans6:-	Java is called a “write once, run anywhere” language because it is platform-independent. Java code is compiled into bytecode, not machine-specific code. 	This bytecode runs on any operating system using the Java Virtual Machine (JVM). So, the same program can run on different platforms without 	modification.

Ans7:-	In Java, a ClassLoader is used to load classes into memory when the program needs them. It first asks its parent loader to load a class, and if the parent 	can’t, it loads the class itself. There are three main types: Bootstrap (loads core Java classes), Extension (loads library classes), and System/Application 	(loads your program’s classes). This helps Java run programs efficiently on any platform.
			
Ans8:-	No, main is not a keyword in Java. It is just a name given to the method where program execution starts. You can technically name other methods main too, but the 	JVM looks for public static void main(String[] args) to start the program.

Ans9:-	No, we cannot write public void static main in Java. The order of keywords matters: it must be public static void main. Otherwise, the JVM will not recognize it as 	the program’s starting point and give an error.
	